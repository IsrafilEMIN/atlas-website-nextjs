// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum ServiceType {
  EXTERIOR_PAINTING
  COMMERCIAL_PAINTING
  RESIDENTIAL_PAINTING
  WALL_COVERING
  DRYWALL_PLASTERING
}

enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELLED
}

model Customer {
  id        String   @id @default(uuid())
  name      String
  email     String   @unique
  phone     String
  createdAt DateTime @default(now())

  // Relationship with Review
  reviews Review[]

  // Relationship with Booking
  bookings    Booking[]
  ReviewToken ReviewToken[]
}

model Review {
  id           Int         @id @default(autoincrement())
  customerName String
  rating       Int // Validate between 1 and 5 in your application
  comment      String
  serviceType  ServiceType
  createdAt    DateTime    @default(now())

  // Relationship with Customer
  Customer   Customer? @relation(fields: [customerId], references: [id])
  customerId String?
}

model ReviewToken {
  id         Int      @id @default(autoincrement())
  token      String   @unique
  used       Boolean  @default(false)
  createdAt  DateTime @default(now())
  expiryTime DateTime

  // Relationship with Customer
  customer   Customer? @relation(fields: [customerId], references: [id])
  customerId String?
}

model Booking {
  id             Int            @id @default(autoincrement())
  customerId     String?
  customer       Customer?      @relation(fields: [customerId], references: [id], onDelete: Cascade)
  customerName   String
  customerPhone  String
  customerEmail  String
  serviceType    ServiceType
  projectDetails String
  availableTime  String         @default("")
  notifications  Notification[] // A booking can have many notifications
  createdAt      DateTime       @default(now())
  status         BookingStatus  @default(PENDING)
}

model Notification {
  id        Int      @id @default(autoincrement())
  message   String
  read      Boolean  @default(false)
  // Each notification is related to one booking entry.
  booking   Booking  @relation(fields: [bookingId], references: [id])
  bookingId Int
  createdAt DateTime @default(now())
}
